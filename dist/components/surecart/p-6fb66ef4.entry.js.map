{"version":3,"names":["scAddressCss","wp","i18n","__","name","_b","this","names","disabled","required","requireName","placeholders","h","exportparts","part","value","_c","address","country","onScChange","e","_d","search","unselect","squared","showName","_e","line_1","updateAddress","target","onScInput","handleAddressInput","autocomplete","placeholder","_f","showLine2","_h","_g","line_2","length","_j","_k","class","showCity","city","_l","_m","_o","regions","showPostal","postal_code","_p","_q","_r","maxlength","_s","_t","_u","state","_v","_w","_a","detail","choices","loading","scCheckboxCss","id","ScCheckbox","inputId","labelId","firstUpdated","input","indeterminate","async","click","options","focus","blur","invalid","checkValidity","reportValidity","setCustomValidity","message","handleClick","checked","handleBlur","hasFocus","scBlur","emit","handleFocus","scFocus","handleLabelMouseDown","handleStateChange","scChange","componentDidLoad","formController","FormSubmitController","el","control","undefined","addFormData","disconnectedCallback","removeFormData","render","Tag","edit","checkbox","isRtl","htmlFor","onMouseDown","viewBox","stroke","fill","transform","d","ref","type","role","onClick","onBlur","onFocus","scTaxIdInputCss","number","slot","caret","style","color","tabindex","filteredZones","label_small","Object","keys","map","sprintf","zones"],"sources":["./src/components/ui/address/sc-address.scss?tag=sc-address&encapsulation=shadow","./src/components/ui/address/sc-address.tsx","./src/components/ui/checkbox/sc-checkbox.scss?tag=sc-checkbox&encapsulation=shadow","./src/components/ui/checkbox/sc-checkbox.tsx","./src/components/ui/tax-id-input/sc-tax-id-input.css?tag=sc-tax-id-input&encapsulation=shadow","./src/components/ui/tax-id-input/sc-tax-id-input.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n\n.sc-address {\n  display: block;\n  position: relative;\n\n  [hidden] {\n    display: none;\n  }\n\n  &--loading {\n    min-height: 230px;\n  }\n\n  sc-skeleton {\n    display: block;\n    margin-bottom: 1em;\n  }\n\n  &__control {\n    display: block;\n\n    > * {\n      margin-bottom: var(--sc-address-column-spacing, -1px);\n    }\n  }\n\n  &__columns {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    flex-wrap: wrap;\n    justify-content: space-between;\n\n    > * {\n      flex: 1;\n      width: 50%;\n      margin-right: var(--sc-address-column-spacing, -1px);\n\n      &:last-child {\n        margin-right: 0;\n      }\n    }\n  }\n}\n","import { Component, Element, Event, EventEmitter, h, Method, Prop, State, Watch } from '@stencil/core';\nimport { __ } from '@wordpress/i18n';\nimport { hasState, hasCity, hasPostal, countryChoices } from '../../../functions/address';\nimport { reportChildrenValidity } from '../../../functions/form-data';\nimport { Address } from '../../../types';\n\n/**\n * @part base - The elements base wrapper.\n * @part input__base - The inputs base element.\n * @part select__base - The select boxes base element.\n * @part input - The html input element.\n * @part form-control - The form control wrapper.\n * @part label - The input label.\n * @part help-text - Help text that describes how to use the input.\n * @part trigger - The select box trigger.\n * @part panel - The select box panel.\n * @part caret - The select box caret.\n * @part search__base - The select search base.\n * @part search__input - The select search input.\n * @part search__form-control - The select search form control.\n * @part menu__base - The select menu base.\n * @part spinner__base  - The select spinner base.\n * @part empty - The select empty message.\n * @part block-ui - The block ui base component.\n * @part block-ui__content - The block ui content (spinner).\n */\n@Component({\n  tag: 'sc-address',\n  styleUrl: 'sc-address.scss',\n  shadow: true,\n})\nexport class ScAddress {\n  @Element() el: HTMLScAddressElement;\n\n  /** The address. */\n  @Prop({ mutable: true }) address: Partial<Address> = {\n    country: null,\n    city: null,\n    line_1: null,\n    line_2: null,\n    postal_code: null,\n    state: null,\n  };\n\n  @Prop() names: Partial<Address> = {\n    name: 'shipping_name',\n    country: 'shipping_country',\n    city: 'shipping_city',\n    line_1: 'shipping_line_1',\n    line_2: 'shipping_line_2',\n    postal_code: 'shipping_postal_code',\n    state: 'shipping_state',\n  };\n\n  @Prop() placeholders: Partial<Address> = {};\n\n  /** Is this loading?  */\n  @Prop() loading: boolean = false;\n\n  /** Is this disabled? */\n  @Prop() disabled: boolean;\n\n  /** The label for the field. */\n  @Prop() label: string;\n\n  /** Should we show name field? */\n  @Prop({ reflect: true, mutable: true }) showName: boolean;\n\n  /** Should we show name field? */\n  @Prop() showLine2: boolean;\n\n  /** Is this required? */\n  @Prop({ reflect: true }) required: boolean = false;\n\n  /** Is the name required */\n  @Prop({ reflect: true }) requireName: boolean = false;\n\n  /** Should we show the city field? */\n  @State() showCity: boolean = true;\n\n  /** Should we show the postal field? */\n  @State() showPostal: boolean = true;\n\n  /** Holds the regions for a given country. */\n  @State() regions: Array<{ value: string; label: string }>;\n\n  /** Holds our country choices. */\n  @State() countryChoices: Array<{ value: string; label: string }> = countryChoices;\n\n  /** Address change event. */\n  @Event() scChangeAddress: EventEmitter<Partial<Address>>;\n\n  /** Address change event. */\n  @Event() scInputAddress: EventEmitter<Partial<Address>>;\n\n  /** When the state changes, we want to update city and postal fields. */\n  @Watch('address')\n  handleAddressChange() {\n    if (!this.address?.country) return;\n    this.setRegions();\n    this.showPostal = hasPostal(this.address.country);\n    this.showCity = hasCity(this.address.country);\n    this.scChangeAddress.emit(this.address);\n    this.scInputAddress.emit(this.address);\n  }\n\n  @Watch('requireName')\n  handleNameChange() {\n    if (this.requireName) {\n      this.showName = true;\n    }\n  }\n\n  decodeHtmlEntities(html: string) {\n    return new DOMParser().parseFromString(html, 'text/html')?.body.textContent || html;\n  }\n\n  updateAddress(address: Partial<Address>) {\n    this.address = { ...this.address, ...address };\n  }\n\n  handleAddressInput(address: Partial<Address>) {\n    this.scInputAddress.emit({ ...this.address, ...address });\n  }\n\n  clearAddress() {\n    this.address = {\n      name: this.address?.name,\n      country: null,\n      city: null,\n      line_1: null,\n      line_2: null,\n      postal_code: null,\n      state: null,\n    };\n  }\n\n  /** Set the regions based on the country. */\n  setRegions() {\n    if (hasState(this.address?.country)) {\n      import('./countries.json').then(module => {\n        const countryRegions = module?.[this.address.country] as Array<{ value: string; label: string }>;\n\n        this.regions = (countryRegions || []).map(region => ({\n          ...region,\n          label: this.decodeHtmlEntities(region.label),\n        }));\n      });\n    } else {\n      this.regions = [];\n    }\n  }\n\n  componentWillLoad() {\n    this.handleAddressChange();\n    const country = this.countryChoices.find(country => country.value === this.address?.country)?.value || null;\n    this.updateAddress({ country });\n    this.handleNameChange();\n  }\n\n  @Method()\n  async reportValidity() {\n    return reportChildrenValidity(this.el);\n  }\n\n  render() {\n    return (\n      <div class=\"sc-address\" part=\"base\">\n        <sc-form-control label={this.label} exportparts=\"label, help-text, form-control\" class=\"sc-address__control\" required={this.required}>\n          {this.showName && (\n            <sc-input\n              exportparts=\"base:input__base, input, form-control, label, help-text\"\n              value={this?.address?.name}\n              onScChange={(e: any) => this.updateAddress({ name: e.target.value || null })}\n              onScInput={(e: any) => this.handleAddressInput({ name: e.target.value || null })}\n              autocomplete=\"street-address\"\n              placeholder={this.placeholders.name || __('Name or Company Name', 'surecart')}\n              name={this.names?.name}\n              squared-bottom\n              disabled={this.disabled}\n              required={this.requireName}\n              aria-label={this.placeholders.name || __('Name or Company Name', 'surecart')}\n            />\n          )}\n\n          <sc-select\n            exportparts=\"base:select__base, input, form-control, label, help-text, trigger, panel, caret, search__base, search__input, search__form-control, menu__base, spinner__base, empty\"\n            part=\"name__input\"\n            value={this.address?.country}\n            onScChange={(e: any) => {\n              this.clearAddress();\n              this.updateAddress({ country: e.target.value });\n            }}\n            choices={this.countryChoices}\n            autocomplete={'country-name'}\n            placeholder={this.placeholders.country || __('Country', 'surecart')}\n            name={this.names?.country}\n            search\n            unselect={false}\n            squared-bottom\n            squared={this.showName}\n            disabled={this.disabled}\n            required={this.required}\n            aria-label={this.placeholders.country || __('Country', 'surecart')}\n          />\n\n          <sc-input\n            exportparts=\"base:input__base, input, form-control, label, help-text\"\n            value={this?.address?.line_1}\n            onScChange={(e: any) => this.updateAddress({ line_1: e.target.value || null })}\n            onScInput={(e: any) => this.handleAddressInput({ line_1: e.target.value || null })}\n            autocomplete=\"street-address\"\n            placeholder={this.placeholders.line_1 || __('Address', 'surecart')}\n            name={this.names?.line_1}\n            squared\n            disabled={this.disabled}\n            required={this.required}\n            aria-label={this.placeholders.line_1 || __('Address', 'surecart')}\n          />\n\n          {(this.showLine2 || !!this?.address?.line_2?.length) && (\n            <sc-input\n              exportparts=\"base:input__base, input, form-control, label, help-text\"\n              value={this?.address?.line_2}\n              onScChange={(e: any) => this.updateAddress({ line_2: e.target.value || null })}\n              onScInput={(e: any) => this.handleAddressInput({ line_2: e.target.value || null })}\n              autocomplete=\"street-address\"\n              placeholder={this.placeholders.line_2 || __('Address Line 2', 'surecart')}\n              name={this.names?.line_2}\n              squared\n              disabled={this.disabled}\n              aria-label={this.placeholders.line_2 || __('Address Line 2', 'surecart')}\n            />\n          )}\n\n          <div class=\"sc-address__columns\" part=\"columns\">\n            {this.showCity && (\n              <sc-input\n                exportparts=\"base:input__base, input, form-control, label, help-text\"\n                placeholder={this.placeholders.city || __('City', 'surecart')}\n                name={this.names?.city}\n                value={this?.address?.city}\n                onScChange={(e: any) => this.updateAddress({ city: e.target.value || null })}\n                onScInput={(e: any) => this.handleAddressInput({ city: e.target.value || null })}\n                required={this.required}\n                squared={!!this?.regions?.length}\n                // style={{ marginRight: this.showPostal ? '-1px' : '0' }}\n                squared-top\n                disabled={this.disabled}\n                squared-right={this.showPostal}\n                aria-label={this.placeholders.city || __('City', 'surecart')}\n              />\n            )}\n\n            {this.showPostal && (\n              <sc-input\n                exportparts=\"base:input__base, input, form-control, label, help-text\"\n                placeholder={this.placeholders.postal_code || __('Postal Code/Zip', 'surecart')}\n                name={this.names?.postal_code}\n                onScChange={(e: any) => this.updateAddress({ postal_code: e.target.value || null })}\n                onScInput={(e: any) => this.handleAddressInput({ postal_code: e.target.value || null })}\n                autocomplete={'postal-code'}\n                required={this.required}\n                value={this?.address?.postal_code}\n                squared={!!this?.regions?.length}\n                squared-top\n                disabled={this.disabled}\n                maxlength={this.address?.country === 'US' ? 5 : null}\n                squared-left={this.showCity}\n                aria-label={this.placeholders.postal_code || __('Postal Code/Zip', 'surecart')}\n              />\n            )}\n          </div>\n\n          {!!this?.regions?.length && !!this?.address?.country && (\n            <sc-select\n              exportparts=\"base:select__base, input, form-control, label, help-text, trigger, panel, caret, search__base, search__input, search__form-control, menu__base, spinner__base, empty\"\n              placeholder={this.placeholders.state || __('State/Province/Region', 'surecart')}\n              name={this.names?.state}\n              autocomplete={'address-level1'}\n              value={this?.address?.state}\n              onScChange={(e: any) => this.updateAddress({ state: e.target.value || e.detail?.value || null })}\n              choices={this.regions}\n              required={this.required}\n              disabled={this.disabled}\n              search\n              squared-top\n              aria-label={this.placeholders.state || __('State/Province/Region', 'surecart')}\n            />\n          )}\n        </sc-form-control>\n\n        {this.loading && <sc-block-ui exportparts=\"base:block-ui, content:block-ui__content\"></sc-block-ui>}\n      </div>\n    );\n  }\n}\n",":host {\n  display: block;\n}\n\n.checkbox {\n  display: flex;\n  font-family: var(--sc-input-font-family);\n  font-size: var(--sc-input-font-size-medium);\n  font-weight: var(--sc-input-font-weight);\n  color: var(--sc-input-color);\n  vertical-align: middle;\n  cursor: pointer;\n}\n\n.checkbox__control {\n  flex: 0 0 auto;\n  position: relative;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  width: var(--sc-checkbox-size);\n  height: var(--sc-checkbox-size);\n  border: solid var(--sc-input-border-width) var(--sc-input-border-color);\n  border-radius: 2px;\n  background-color: var(--sc-input-background-color);\n  color: var(--sc-color-white);\n  transition: var(--sc-input-transition, var(--sc-transition-medium)) border-color, var(--sc-input-transition, var(--sc-transition-medium)) opacity,\n    var(--sc-input-transition, var(--sc-transition-medium)) background-color, var(--sc-input-transition, var(--sc-transition-medium)) color,\n    var(--sc-input-transition, var(--sc-transition-medium)) box-shadow;\n\n  input[type='checkbox'] {\n    position: absolute;\n    opacity: 0;\n    padding: 0;\n    margin: 0;\n    pointer-events: none;\n  }\n\n  .checkbox__icon {\n    display: inline-flex;\n    width: var(--sc-checkbox-size);\n    height: var(--sc-checkbox-size);\n\n    svg {\n      width: 100%;\n      height: 100%;\n    }\n  }\n}\n\n// Hover\n.checkbox:not(.checkbox--checked):not(.checkbox--disabled) .checkbox__control:hover {\n  border-color: var(--sc-input-border-color-hover);\n  background-color: var(--sc-input-background-color-hover);\n}\n\n// Focus\n.checkbox.checkbox--focused:not(.checkbox--checked):not(.checkbox--disabled) .checkbox__control {\n  border-color: var(--sc-input-border-color-focus);\n  background-color: var(--sc-input-background-color-focus);\n  box-shadow: 0 0 0 var(--sc-focus-ring-width) var(--sc-focus-ring-color-primary);\n}\n\n// Checked/indeterminate\n.checkbox--checked .checkbox__control,\n.checkbox--indeterminate .checkbox__control {\n  border-color: var(--sc-color-primary-500);\n  background-color: var(--sc-color-primary-500);\n}\n\n// Checked/indeterminate + hover\n.checkbox.checkbox--checked:not(.checkbox--disabled) .checkbox__control:hover,\n.checkbox.checkbox--indeterminate:not(.checkbox--disabled) .checkbox__control:hover {\n  opacity: 0.8;\n}\n\n// Checked/indeterminate + focus\n.checkbox.checkbox--checked:not(.checkbox--disabled).checkbox--focused .checkbox__control,\n.checkbox.checkbox--indeterminate:not(.checkbox--disabled).checkbox--focused .checkbox__control {\n  border-color: var(--sc-color-white);\n  background-color: var(--sc-color-primary-500);\n  box-shadow: 0 0 0 var(--sc-focus-ring-width) var(--sc-focus-ring-color-primary);\n}\n\n// Disabled\n.checkbox--disabled {\n  opacity: 0.5;\n  cursor: not-allowed;\n}\n\n.checkbox__label {\n  line-height: var(--sc-checkbox-size);\n  margin-top: var(--sc-input-border-width);\n  margin-left: 0.5em;\n  flex: 1;\n  // user-select: none;\n}\n\n.checkbox--is-required .checkbox__label:after {\n  content: ' *';\n  color: var(--sc-color-danger-500);\n}\n\n::slotted(*) {\n  display: inline-block;\n}\n\n.checkbox--is-rtl {\n  .checkbox__label {\n    margin-left: 0;\n    margin-right: 0.5em;\n  }\n}\n","import { Component, Prop, State, h, Event, EventEmitter, Method, Watch, Element } from '@stencil/core';\nimport { FormSubmitController } from '../../../functions/form-data';\nimport { isRtl } from '../../../functions/page-align';\n\nlet id = 0;\n\n/**\n * @part base - The elements base wrapper.\n * @part control - The control wrapper.\n * @part checked-icon - Checked icon.\n * @part indeterminate-icon - Indeterminate icon.\n * @part label - The label.\n */\n@Component({\n  tag: 'sc-checkbox',\n  styleUrl: 'sc-checkbox.scss',\n  shadow: true,\n})\nexport class ScCheckbox {\n  @Element() el: HTMLScCheckboxElement;\n  private input: HTMLInputElement;\n  private formController: any;\n  private inputId = `checkbox-${++id}`;\n  private labelId = `checkbox-label-${id}`;\n\n  @State() private hasFocus: boolean = false;\n\n  /** The checkbox's name attribute. */\n  @Prop() name: string;\n\n  /** The checkbox's value attribute. */\n  @Prop() value: string;\n\n  /** Disables the checkbox. */\n  @Prop({ reflect: true }) disabled: boolean = false;\n\n  /** Makes this edit and not editable. */\n  @Prop({ reflect: true }) edit: boolean = false;\n\n  /** Makes the checkbox a required field. */\n  @Prop({ reflect: true }) required: boolean = false;\n\n  /** Draws the checkbox in a checked state. */\n  @Prop({ reflect: true, mutable: true }) checked: boolean = false;\n\n  /** Draws the checkbox in an indeterminate state. */\n  @Prop({ reflect: true, mutable: true }) indeterminate: boolean = false;\n\n  /** This will be true when the control is in an invalid state. Validity is determined by the `required` prop. */\n  @Prop({ reflect: true, mutable: true }) invalid: boolean = false;\n\n  /** Emitted when the control loses focus. */\n  @Event() scBlur: EventEmitter<void>;\n\n  /** Emitted when the control's checked state changes. */\n  @Event() scChange: EventEmitter<void>;\n\n  /** Emitted when the control gains focus. */\n  @Event() scFocus: EventEmitter<void>;\n\n  firstUpdated() {\n    this.input.indeterminate = this.indeterminate;\n  }\n\n  /** Simulates a click on the checkbox. */\n  @Method()\n  async triggerClick() {\n    return this.input.click();\n  }\n\n  /** Sets focus on the checkbox. */\n  @Method()\n  async triggerFocus(options?: FocusOptions) {\n    return this.input.focus(options);\n  }\n\n  /** Removes focus from the checkbox. */\n  @Method()\n  async triggerBlur() {\n    return this.input.blur();\n  }\n\n  /** Checks for validity and shows the browser's validation message if the control is invalid. */\n  @Method()\n  async reportValidity() {\n    this.invalid = !this.input.checkValidity();\n    return this.input.reportValidity();\n  }\n\n  /** Sets a custom validation message. If `message` is not empty, the field will be considered invalid. */\n  setCustomValidity(message: string) {\n    this.input.setCustomValidity(message);\n    this.invalid = !this.input.checkValidity();\n  }\n\n  handleClick() {\n    this.checked = !this.checked;\n    this.indeterminate = false;\n  }\n\n  handleBlur() {\n    this.hasFocus = false;\n    this.scBlur.emit();\n  }\n\n  handleFocus() {\n    this.hasFocus = true;\n    this.scFocus.emit();\n  }\n\n  handleLabelMouseDown() {\n    // Prevent clicks on the label from briefly blurring the input\n    // event.preventDefault();\n    this.input.focus();\n  }\n\n  @Watch('checked')\n  @Watch('indeterminate')\n  handleStateChange() {\n    this.input.checked = this.checked;\n    this.input.indeterminate = this.indeterminate;\n    this.scChange.emit();\n  }\n\n  componentDidLoad() {\n    this.formController = new FormSubmitController(this.el, {\n      value: (control: HTMLScChoiceElement) => (control.checked ? control.value : undefined),\n    }).addFormData();\n  }\n\n  disconnectedCallback() {\n    this.formController?.removeFormData();\n  }\n\n  render() {\n    const Tag = this.edit ? 'div' : 'label';\n    return (\n      <Tag\n        part=\"base\"\n        class={{\n          'checkbox': true,\n          'checkbox--is-required': this.required,\n          'checkbox--checked': this.checked,\n          'checkbox--disabled': this.disabled,\n          'checkbox--focused': this.hasFocus,\n          'checkbox--indeterminate': this.indeterminate,\n          'checkbox--is-rtl':isRtl()\n        }}\n        htmlFor={this.inputId}\n        onMouseDown={() => this.handleLabelMouseDown()}\n      >\n        <span part=\"control\" class=\"checkbox__control\">\n          {this.checked ? (\n            <span part=\"checked-icon\" class=\"checkbox__icon\">\n              <svg viewBox=\"0 0 16 16\">\n                <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\" stroke-linecap=\"round\">\n                  <g stroke=\"currentColor\" stroke-width=\"2\">\n                    <g transform=\"translate(3.428571, 3.428571)\">\n                      <path d=\"M0,5.71428571 L3.42857143,9.14285714\"></path>\n                      <path d=\"M9.14285714,0 L3.42857143,9.14285714\"></path>\n                    </g>\n                  </g>\n                </g>\n              </svg>\n            </span>\n          ) : (\n            ''\n          )}\n          {!this.checked && this.indeterminate ? (\n            <span part=\"indeterminate-icon\" class=\"checkbox__icon\">\n              <svg viewBox=\"0 0 16 16\">\n                <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\" stroke-linecap=\"round\">\n                  <g stroke=\"currentColor\" stroke-width=\"2\">\n                    <g transform=\"translate(2.285714, 6.857143)\">\n                      <path d=\"M10.2857143,1.14285714 L1.14285714,1.14285714\"></path>\n                    </g>\n                  </g>\n                </g>\n              </svg>\n            </span>\n          ) : (\n            ''\n          )}\n          <input\n            id={this.inputId}\n            ref={el => (this.input = el as HTMLInputElement)}\n            type=\"checkbox\"\n            name={this.name}\n            value={this.value}\n            checked={this.checked}\n            disabled={this.disabled}\n            required={this.required}\n            role=\"checkbox\"\n            aria-checked={this.checked ? 'true' : 'false'}\n            aria-labelledby={this.labelId}\n            onClick={() => this.handleClick()}\n            onBlur={() => this.handleBlur()}\n            onFocus={() => this.handleFocus()}\n          />\n        </span>\n        <span part=\"label\" id={this.labelId} class=\"checkbox__label\">\n          <slot></slot>\n        </span>\n      </Tag>\n    );\n  }\n}\n",":host {\n  display: block;\n  z-index: 3;\n  position: relative;\n}\n","import { Component, h, Prop, Fragment, Watch, Event, EventEmitter, Method } from '@stencil/core';\nimport { __, sprintf } from '@wordpress/i18n';\nimport { speak } from '@wordpress/a11y';\nimport { zones } from '../../../functions/tax';\n\n@Component({\n  tag: 'sc-tax-id-input',\n  styleUrl: 'sc-tax-id-input.css',\n  shadow: true,\n})\nexport class ScTaxIdInput {\n  /** The input */\n  private input: HTMLScInputElement;\n\n  /** The country code. */\n  @Prop() country: string;\n\n  /** Force show the field. */\n  @Prop() show: boolean = false;\n\n  /** Type of tax id */\n  @Prop({ mutable: true }) type: string = 'other';\n\n  /** Tax ID Number */\n  @Prop() number: string = null;\n\n  /** The status */\n  @Prop() status: 'valid' | 'invalid' | 'unknown' = 'unknown';\n\n  /** Is this loading? */\n  @Prop() loading: boolean;\n\n  /** Help text. */\n  @Prop() help: string;\n\n  /** Other zones label */\n  @Prop() otherLabel: string = __('Tax ID', 'surecart');\n\n  /** GST zone label */\n  @Prop() caGstLabel: string = __('GST Number', 'surecart');\n\n  /** AU zone label */\n  @Prop() auAbnLabel: string = __('ABN Number', 'surecart');\n\n  /** UK zone label */\n  @Prop() gbVatLabel: string = __('UK VAT', 'surecart');\n\n  /** EU zone label */\n  @Prop() euVatLabel: string = __('EU VAT', 'surecart');\n\n  /** Tax ID Types which will be shown */\n  @Prop() taxIdTypes: string[] = [];\n\n  /** Whether tax input is required */\n  @Prop({ reflect: true }) required: boolean = false;\n\n  /** Make a request to update the order. */\n  @Event() scChange: EventEmitter<{ number: string; number_type: string }>;\n\n  /** Make a request to update the order. */\n  @Event() scInput: EventEmitter<Partial<{ number: string; number_type: string }>>;\n\n  /** Change the Type */\n  @Event() scInputType: EventEmitter<string>;\n\n  /** Set the checkout state. */\n  @Event() scSetState: EventEmitter<string>;\n\n  @Method()\n  async reportValidity() {\n    return this.input.reportValidity();\n  }\n\n  @Watch('otherLabel')\n  @Watch('caGstLabel')\n  @Watch('auAbnLabel')\n  @Watch('gbVatLabel')\n  @Watch('euVatLabel')\n  onLabelChange() {\n    zones.ca_gst.label = this.caGstLabel || zones.ca_gst.label;\n    zones.au_abn.label = this.auAbnLabel || zones.au_abn.label;\n    zones.gb_vat.label = this.gbVatLabel || zones.gb_vat.label;\n    zones.eu_vat.label = this.euVatLabel || zones.eu_vat.label;\n    zones.other.label = this.otherLabel || zones.other.label;\n  }\n\n  componentWillLoad() {\n    this.onLabelChange();\n  }\n\n  renderStatus() {\n    if (this.status === 'valid') {\n      return <sc-icon name=\"check\" slot=\"prefix\" style={{ color: 'var(--sc-color-success-500)' }}></sc-icon>;\n    }\n    if (this.status === 'invalid') {\n      return <sc-icon name=\"x\" slot=\"prefix\" style={{ color: 'var(--sc-color-danger-500)' }}></sc-icon>;\n    }\n  }\n\n  filteredZones() {\n    if (!!this.taxIdTypes.length) {\n      return Object.keys(zones)\n        .filter(name => this.taxIdTypes.includes(name))\n        .reduce((obj, key) => {\n          obj[key] = zones[key];\n          return obj;\n        }, {});\n    }\n\n    return zones;\n  }\n\n  @Watch('taxIdTypes')\n  onTaxIdTypesChange() {\n    // If there is no other type, set the first one as default type.\n    if (!!this.taxIdTypes.length) {\n      this.type = !this.taxIdTypes.includes('other') ? this.taxIdTypes[0] : 'other';\n    }\n  }\n\n  getZoneLabel() {\n    const filteredZones = this.filteredZones() || {};\n\n    // Get the label of the current type or the other type.\n    // If there is no other type, get the first one.\n    return filteredZones?.[this?.type || 'other']?.label || filteredZones?.[Object.keys(filteredZones)[0]]?.label;\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <sc-input name=\"tax_identifier.number_type\" required={this.required} value={this.type} style={{ display: 'none' }} />\n        <sc-input\n          ref={el => (this.input = el as HTMLScInputElement)}\n          label={this.getZoneLabel()}\n          aria-label={__('Tax ID', 'surecart')}\n          placeholder={__('Enter Tax ID', 'surecart')}\n          name=\"tax_identifier.number\"\n          value={this.number}\n          onScInput={(e: any) => {\n            e.stopImmediatePropagation();\n            this.scInput.emit({\n              number: e.target.value,\n              number_type: this.type || 'other',\n            });\n          }}\n          onScChange={(e: any) => {\n            e.stopImmediatePropagation();\n            this.scChange.emit({\n              number: e.target.value,\n              number_type: this.type || 'other',\n            });\n          }}\n          help={this.help}\n          required={this.required}\n        >\n          {this.loading && this.type === 'eu_vat' ? <sc-spinner slot=\"prefix\" style={{ '--spinner-size': '10px' }}></sc-spinner> : this.renderStatus()}\n\n          {Object.keys(this.filteredZones() || {})?.length === 1 ? (\n            <span slot=\"suffix\">{Object.values(this.filteredZones() || {})?.[0]?.['label_small']}</span>\n          ) : (\n            <sc-dropdown slot=\"suffix\" position=\"bottom-right\" role=\"select\" aria-multiselectable=\"false\" aria-label={__('Select number type', 'surecart')}>\n              <sc-button type=\"text\" slot=\"trigger\" caret loading={false} style={{ color: 'var(--sc-input-label-color)' }} tabindex=\"0\">\n                {this.filteredZones()?.[this?.type || 'other']?.label_small}\n              </sc-button>\n              <sc-menu>\n                {Object.keys(this.filteredZones() || {}).map(name => (\n                  <sc-menu-item\n                    role=\"option\"\n                    onClick={() => {\n                      this.scInput.emit({\n                        number: this.number,\n                        number_type: name,\n                      });\n                      this.scChange.emit({\n                        number: this.number,\n                        number_type: name,\n                      });\n                      this.type = name;\n                    }}\n                    onKeyDown={e => {\n                      if (e.key === 'Enter') {\n                        this.scInput.emit({\n                          number: this.number,\n                          number_type: name,\n                        });\n                        this.scChange.emit({\n                          number: this.number,\n                          number_type: name,\n                        });\n                        this.type = name;\n                        this.input?.triggerFocus();\n                        speak(sprintf(__('%s selected', 'surecart'), zones[name].label_small, 'assertive'));\n                      }\n                    }}\n                    checked={this.type === name}\n                    aria-selected={this.type === name ? 'true' : 'false'}\n                    aria-label={zones[name].label_small}\n                  >\n                    {zones[name].label_small}\n                  </sc-menu-item>\n                ))}\n              </sc-menu>\n            </sc-dropdown>\n          )}\n        </sc-input>\n      </Fragment>\n    );\n  }\n}\n"],"mappings":"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"}